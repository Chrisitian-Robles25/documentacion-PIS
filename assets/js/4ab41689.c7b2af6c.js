"use strict";(self.webpackChunkdocumentacion=self.webpackChunkdocumentacion||[]).push([[4036],{8872:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>_,frontMatter:()=>t,metadata:()=>r,toc:()=>l});var d=a(4848),o=a(8453);const t={},s="Lista Enlazada",r={id:"TDA/ListaEnlazada",title:"Lista Enlazada",description:"Clase: Linked_List",source:"@site/docs/TDA/ListaEnlazada.md",sourceDirName:"TDA",slug:"/TDA/ListaEnlazada",permalink:"/documentacion-PIS/docs/TDA/ListaEnlazada",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/TDA/ListaEnlazada.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Nodo de una lista enlazada",permalink:"/documentacion-PIS/docs/TDA/NodeLinkedList"}},i={},l=[{value:"Clase: Linked_List",id:"clase-linked_list",level:2},{value:"Constructor",id:"constructor",level:3},{value:"M\xe9todo: addFirst",id:"m\xe9todo-addfirst",level:3},{value:"M\xe9todo: addLast",id:"m\xe9todo-addlast",level:3},{value:"M\xe9todo: edit",id:"m\xe9todo-edit",level:3},{value:"M\xe9todo: getNode",id:"m\xe9todo-getnode",level:3},{value:"M\xe9todo: add",id:"m\xe9todo-add",level:3},{value:"Propiedad: clear",id:"propiedad-clear",level:3},{value:"<code>__exist__</code> (M\xe9todo)",id:"__exist__-m\xe9todo",level:3},{value:"<code>detele</code> (M\xe9todo)",id:"detele-m\xe9todo",level:3},{value:"<code>sort_models</code> (M\xe9todo)",id:"sort_models-m\xe9todo",level:3},{value:"<code>search_model</code> (M\xe9todo)",id:"search_model-m\xe9todo",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h1,{id:"lista-enlazada",children:"Lista Enlazada"}),"\n",(0,d.jsx)(n.h2,{id:"clase-linked_list",children:"Clase: Linked_List"}),"\n",(0,d.jsxs)(n.p,{children:["La clase ",(0,d.jsx)(n.code,{children:"Linked_List"})," implementa una lista enlazada con varias operaciones para manejar los nodos y los datos almacenados en ellos."]}),"\n",(0,d.jsx)(n.h3,{id:"constructor",children:"Constructor"}),"\n",(0,d.jsxs)(n.p,{children:["El constructor inicializa una lista enlazada vac\xeda, con la cabeza ( ",(0,d.jsx)(n.code,{children:"__head "}),"), el \xfaltimo nodo (",(0,d.jsx)(n.code,{children:"__last"}),") y la longitud (",(0,d.jsx)(n.code,{children:"__length"}),") establecidos a ",(0,d.jsx)(n.code,{children:"None"})," y 0, respectivamente."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"def __init__(self):\r\n    self.__head = None\r\n    self.__last = None\r\n    self.__length = 0\n"})}),"\n",(0,d.jsx)(n.h3,{id:"m\xe9todo-addfirst",children:"M\xe9todo: addFirst"}),"\n",(0,d.jsx)(n.p,{children:"Este m\xe9todo agrega un nuevo nodo al inicio de la lista. Si la lista est\xe1 vac\xeda, crea un nuevo nodo y lo establece como cabeza y \xfaltimo nodo. De lo contrario, inserta el nuevo nodo antes de la cabeza actual."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"def __addFirst__(self, data):\r\n    if self.isEmpty:\r\n        node = Node(data)\r\n        self.__head = node\r\n        self.__last = node\r\n        self.__length += 1\r\n    else: \r\n        headOld = self.__head\r\n        self.__head = Node(data, headOld)\r\n        self.__length += 1\r\n\n"})}),"\n",(0,d.jsx)(n.h3,{id:"m\xe9todo-addlast",children:"M\xe9todo: addLast"}),"\n",(0,d.jsxs)(n.p,{children:["Este m\xe9todo agrega un nuevo nodo al final de la lista. Si la lista est\xe1 vac\xeda, llama a ",(0,d.jsx)(n.code,{children:"__addFirst__"}),". De lo contrario, inserta el nuevo nodo despu\xe9s del \xfaltimo nodo actual."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"def __addLast__(self, data):\r\n    if self.isEmpty:\r\n        self.__addFirst__(data)\r\n    else: \r\n        node = Node(data)\r\n        self.__last._next = node\r\n        self.__last = node\r\n        self.__length += 1\r\n\n"})}),"\n",(0,d.jsx)(n.h3,{id:"m\xe9todo-edit",children:"M\xe9todo: edit"}),"\n",(0,d.jsxs)(n.p,{children:["Este m\xe9todo edita el dato de un nodo en una posici\xf3n espec\xedfica. Si la posici\xf3n es ",(0,d.jsx)(n.code,{children:"0"}),", edita la cabeza. Si la posici\xf3n es la longitud de la lista, edita el \xfaltimo nodo. De lo contrario, edita el nodo en la posici\xf3n dada."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"def edit(self, data, pos=0):\r\n    if pos == 0:\r\n        self.__head._data = data\r\n    elif pos == self._length:\r\n        self.__last._data = data\r\n    else:\r\n        self.getNode(pos)._data = data\r\n\n"})}),"\n",(0,d.jsx)(n.h3,{id:"m\xe9todo-getnode",children:"M\xe9todo: getNode"}),"\n",(0,d.jsx)(n.p,{children:"Este m\xe9todo devuelve el nodo en una posici\xf3n espec\xedfica. Lanza excepciones si la lista est\xe1 vac\xeda o la posici\xf3n est\xe1 fuera de rango."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'def getNode(self, pos):\r\n    if self.isEmpty:\r\n        raise LinkedEmptyException("List is Empty")\r\n    elif pos < 0 o pos >= self._length:\r\n        raise ArrayPositionException("Position is out of range")\r\n    elif pos == 0:\r\n        return self.__head\r\n    elif pos == self._length - 1:\r\n        return self.__last\r\n    else:\r\n        count = 0\r\n        node = self.__head\r\n        while count < pos:\r\n            node = node._next\r\n            count += 1\r\n        return node\r\n\n'})}),"\n",(0,d.jsx)(n.h3,{id:"m\xe9todo-add",children:"M\xe9todo: add"}),"\n",(0,d.jsxs)(n.p,{children:["Este m\xe9todo agrega un nuevo nodo en una posici\xf3n espec\xedfica. Si la posici\xf3n es ",(0,d.jsx)(n.code,{children:"0"}),", llama a ",(0,d.jsx)(n.code,{children:"__addFirst__"}),". Si la posici\xf3n es la longitud de la lista, llama a ",(0,d.jsx)(n.code,{children:"__addLast__"}),". De lo contrario, inserta el nuevo nodo en la posici\xf3n dada."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"def add(self, data, pos):\r\n    if pos == 0:\r\n        self.__addFirst__(data)\r\n    elif pos == self._length:\r\n        self.__addLast__(data)\r\n    else:\r\n        node_preview = self.getNode(pos-1)\r\n        node_last = node_preview._next\r\n        node_preview._next = Node(data, node_last)\r\n        self.__length += 1\n"})}),"\n",(0,d.jsx)(n.h3,{id:"propiedad-clear",children:"Propiedad: clear"}),"\n",(0,d.jsx)(n.p,{children:"Esta propiedad limpia la lista, estableciendo la cabeza, el \xfaltimo nodo y la longitud a sus valores iniciales."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"@property\r\ndef clear(self):\r\n    self.__head = None\r\n    self.__last = None\r\n    self.__length = 0\r\n\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"__exist__-m\xe9todo",children:[(0,d.jsx)(n.code,{children:"__exist__"})," (M\xe9todo)"]}),"\n",(0,d.jsx)(n.p,{children:"Verifica si un nodo con datos espec\xedficos ya existe en la lista enlazada."}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"Args:\r\ndata: El dato a buscar en los nodos de la lista.\r\nid: (opcional) Un identificador para la b\xfasqueda.\r\ncedula: (opcional) Un n\xfamero de c\xe9dula para la b\xfasqueda.\r\nnunidad: (opcional) Un n\xfamero de unidad para la b\xfasqueda."}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"Returns:\r\ntuple: Un tupla que indica si el nodo existe, junto con el ID y un dato adicional del nodo si existe,\r\no (False, None, None) si no existe."}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:"def __exist__(self, data, id=None, cedula=None, nunidad=None):\r\n    node = self.__head\r\n    for i in range(0, self._length):\r\n        if hasattr(node._data, '_estudianteCedula'):\r\n            return self.model_exist('_estudianteCedula', data, type=0)\r\n        if hasattr(node._data, '_cedula'):\r\n            return self.model_exist('_cedula', data, type=0)\r\n        elif hasattr(node._data, '_ciclo') and node._data._ciclo == id and hasattr(node._data, '_nombre') and node._data._nombre == data and hasattr(node._data, '_cedulaDocente'):\r\n            print('Ya existe materia')\r\n            return True, node._data._id, node._data._cedulaDocente\r\n        elif hasattr(node._data, '_correo'):\r\n            return self.model_exist('_correo', data)\r\n        elif hasattr(node._data, '_docenteUserCedula') and node._data._docenteUserCedula == cedula and hasattr(node._data, '_descripcionFuncionD') and node._data._descripcionFuncionD == data:\r\n            print('Ya existe funcion docente')\r\n            return True, node._data._id, node._data._docenteUserCedula\r\n        elif hasattr(node._data, '_materiaId') and hasattr(node._data, '_nUnidad') and hasattr(node._data, '_nombre'):\r\n            if node._data._nombre == data:\r\n                print('Ya existe unidad')\r\n                return True, node._data._id, node._data._nombre\r\n            elif data and node._data._materiaId == id and node._data._nUnidad == nunidad:\r\n                print('Ya existe unidad')\r\n                return True, node._data._id, node._data._materiaId\r\n        elif hasattr(node._data, '_descripcion') and node._data._descripcion == data:\r\n            return True, node._data._id, node._data._descripcion\r\n        elif hasattr(node._data, '_nombres'):\r\n            return self.model_exist('_nombres', data)\r\n        elif hasattr(node._data, '_nombre') and hasattr(node._data, '_fechaInicio') and hasattr(node._data, '_fechaFin') and node._data._nombre == data:\r\n            print('Ya existe periodo academico')\r\n            return True, node._data._id, node._data._nombre\r\n        node = node._next\r\n    return False, None, None\n"})}),"\n",(0,d.jsx)(n.p,{children:"Descripci\xf3n: M\xe9todo que verifica si un nodo con datos espec\xedficos ya existe en la lista enlazada."}),"\n",(0,d.jsxs)(n.h3,{id:"detele-m\xe9todo",children:[(0,d.jsx)(n.code,{children:"detele"})," (M\xe9todo)"]}),"\n",(0,d.jsx)(n.p,{children:"Elimina un nodo en una posici\xf3n espec\xedfica de la lista enlazada."}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"Args:\r\npos (int): La posici\xf3n del nodo a eliminar."}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"Raises:\r\nLinkedEmptyException: Si la lista est\xe1 vac\xeda.\r\nArrayPositionException: Si la posici\xf3n est\xe1 fuera del rango de la lista."}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'def detele(self, pos):\r\n   \r\n   if self.isEmpty:\r\n       raise LinkedEmptyException("List is Empty")\r\n   elif pos < 0 or pos >= self._length:\r\n       raise ArrayPositionException("Position is out of range")\r\n   elif pos == 0:\r\n       self.__head = self.__head._next\r\n       self.__length -= 1\r\n   elif pos == self._length - 1:\r\n       self.__last = self.getNode(pos-1)\r\n       self.__length -= 1\r\n   else:\r\n       node_preview = self.getNode(pos-1)\r\n       node_last = node_preview._next._next\r\n       node_preview._next = node_last\r\n       self.__length -= 1\n'})}),"\n",(0,d.jsx)(n.p,{children:"Descripci\xf3n: M\xe9todo que elimina un nodo en una posici\xf3n espec\xedfica de la lista enlazada."}),"\n",(0,d.jsxs)(n.h3,{id:"sort_models-m\xe9todo",children:[(0,d.jsx)(n.code,{children:"sort_models"})," (M\xe9todo)"]}),"\n",(0,d.jsx)(n.p,{children:"Ordena los modelos en la lista enlazada seg\xfan un atributo espec\xedfico."}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"Args:\r\nattribute: El atributo por el cual ordenar los modelos.\r\ntype (int): El tipo de ordenamiento; 1 para ascendente, otro valor para descendente."}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"Returns:\r\nlist: La lista de modelos ordenados."}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"Raises:\r\nLinkedEmptyException: Si la lista est\xe1 vac\xeda."}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'def sort_models(self, attribute, type=1):\r\n   \r\n   if self.isEmpty:\r\n       raise LinkedEmptyException("List empty")\r\n   else:\r\n       array = self.toArray()\r\n       if isinstance(array[0], object):\r\n           quick = QuickSort()\r\n           if type == 1:\r\n               array = quick.sort_models_acendent(array, attribute)\r\n           else:\r\n               array = quick.sort_models_descendent(array, attribute)\r\n       self.toList(array)\r\n   return array\n'})}),"\n",(0,d.jsx)(n.p,{children:"Descripci\xf3n: M\xe9todo que ordena los modelos en la lista enlazada seg\xfan un atributo espec\xedfico."}),"\n",(0,d.jsxs)(n.h3,{id:"search_model-m\xe9todo",children:[(0,d.jsx)(n.code,{children:"search_model"})," (M\xe9todo)"]}),"\n",(0,d.jsx)(n.p,{children:"Busca un modelo en la lista enlazada seg\xfan un atributo espec\xedfico y un m\xe9todo de b\xfasqueda."}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"Args:\r\ndata: El dato a buscar.\r\nattribute: El atributo por el cual buscar.\r\ntype (int): El tipo de ordenamiento; 0 para no ordenar, otro valor para ordenar.\r\nmethod (int): El m\xe9todo de b\xfasqueda; 1 para b\xfasqueda secuencial, otro valor para b\xfasqueda binaria."}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"Returns:\r\nlist: La lista de modelos ordenados que coinciden con la b\xfasqueda."}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsx)(n.p,{children:"Raises:\r\nLinkedEmptyException: Si la lista est\xe1 vac\xeda."}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-python",children:'def search_model(self, data, attribute, type=0, method=1):\r\n  \r\n   if self.isEmpty:\r\n       raise LinkedEmptyException("List empty")\r\n   else:\r\n       if method == 1:\r\n           search = SequentialBinarySearch()\r\n           array = self.sort_models(attribute, type)\r\n           array = search.search_models(array, data, attribute)\r\n       else:\r\n           search = BinarySearch()\r\n           array = self.sort_models(attribute, type)\r\n           array = search.search_models(array, data, attribute)\r\n   self.toList(array)\r\n   return array\n'})}),"\n",(0,d.jsx)(n.p,{children:"Descripci\xf3n: M\xe9todo que busca un modelo en la lista enlazada seg\xfan un atributo espec\xedfico y un m\xe9todo de b\xfasqueda."})]})}function _(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>r});var d=a(6540);const o={},t=d.createContext(o);function s(e){const n=d.useContext(t);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),d.createElement(t.Provider,{value:n},e.children)}}}]);